<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tailwind CSS Sidebar UI </title>
    <script src="https://cdn.tailwindcss.com/"></script>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <link  rel="stylesheet"   href="http://cdn.leafletjs.com/leaflet-0.7/leaflet.css"/>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js"></script>
    <script src="http://cdn.leafletjs.com/leaflet-0.7/leaflet.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.0"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>

    <%- include('../partials/head'); %>
  </head>
  <body>


<!-- component -->
<div id="app" class="flex bg-white">
	<div class="md:flex w-2/5 md:w-1/4 h-screen bg-white border-r hidden">
		<div class="mx-auto py-10 overflow-y-auto ">
			<!-- <h1 class="text-2xl font-bold mb-10 cursor-pointer text-[#EC5252] duration-150">Live Tracking</h1> -->
			<ul>

				<li v-for="item in bikers" class="flex space-x-2 mt-2 cursor-pointer hover:text-[#EC5252] duration-150">
          <svg height="30" width="30">
            <circle cx="13" cy="13" r="8" stroke="black" stroke-width="1" :fill="getIconColor(item)" />
          </svg>
          <span class="text-sm">{{ item.name }}</span>
          <span class="text-xs">A : {{ item.order_count }}</span>
				</li>
				
				<!-- <button class="w-full mt-10 bg-[#EC5252] rounded-full py-1.5 text-white">Learn</button> -->
			</ul>
		</div>
	</div>



	<main class="min-h-screen w-full bg-white border-l">
		<nav class="flex items-center justify-between px-10 bg-white py-2 border-b" style="height:60px;">
			<div class="flex items-center bg-gray-100 px-4 py-2 rounded-md space-x-3 w-96">
				<input type="text" placeholder="search" class="bg-gray-100 outline-none w-full" />
				<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 cursor-pointer text-gray-500" fill="none"
					viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
						d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
				</svg>
			</div>
			<div class="flex items-center space-x-4">
				<img class="w-8 rounded-full" src="https://foodmallmm.com/assets/apps/images/logo.png" alt="Elon Musk" />
				<p class="hidden md:block">Food Mall</p>
			</div>
		</nav>
  <!--
    <div class="mx-6">
			<h1 class="my-6 text-3xl">All Courses</h1>
			<div class="md:flex  space-y-3 md:space-y-0 md:space-x-4 mt-6">
				<div class="h-90 bg-gradient-to-r rounded-md from-indigo-600 to-purple-600 p-10">
					<p class="text-3xl font-thin text-indigo-50 cursor-pointer">How to do Basic Jumping and how to
						landing safely</p>
					<div class="flex items-center mt-4 space-x-4">
						<img class="w-10 h-10 rounded-full cursor-pointer" src="https://images.unsplash.com/photo-1570295999919-56ceb5ecca61?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=880&q=80" alt="" />
						<div>
							<h3 class="text-indigo-50 font-semibold cursor-pointer">Thomas Hope</h3>
							<p class="text-indigo-50 text-sm font-thin">53K views • 2 weeks ago</p>
						</div>
					</div>
				</div>
				<div class="h-90 bg-gradient-to-r rounded-md from-indigo-600 to-purple-600 p-10">
					<p class="text-3xl font-thin text-indigo-50 cursor-pointer">How to do Basic Jumping and how to
						landing safely</p>
					<div class="flex items-center mt-4 space-x-4">
						<img class="w-10 h-10 rounded-full cursor-pointer" src="https://images.unsplash.com/photo-1570295999919-56ceb5ecca61?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=880&q=80" alt="" />
						<div>
							<h3 class="text-indigo-50 font-semibold cursor-pointer">Thomas Hope</h3>
							<p class="text-indigo-50 text-sm font-thin">53K views • 2 weeks ago</p>
						</div>
					</div>
				</div>
			</div>
		</div>
  -->
		<div class="grid">
      <div id="map" style="width:100%;height: calc(100vh - 60px) ;overflow: hidden;"></div>
    </div>

  </main>
</div>




<script src='/socket.io/socket.io.js'></script>
    
<script>
  var app = new Vue({
    el: "#app",
    data() {
      return {
        currentColor: "green", 
        message : "this is message", 
        authstatus: false,
        socket : null, 
        map : null, 
        markers : [], 
        users : [],
        biker : [], 
        bikers : [] 
      };
    },
    mounted() {
      this.initMaps(); 
      this.initSocket(); 
    },
    methods: {
      initMaps(){

        map = L.map('map').setView([16.8387371,96.1781961], 14);
        mapLink = 
              '<a href="http://openstreetmap.org">OpenStreetMap</a>';
        L.tileLayer(
            'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; ' + mapLink + ' Contributors',
            maxZoom: 20,
        }).addTo(map);

        /*
        axios
          .get('./attendance/active')
          .then(response => {
            this.users = response.data; 

            for (var i = 0; i < this.users.length; i++) {
              var person = this.users[i];
              // Create and save a reference to each marker
              // markers[person.id] = L.marker(person.latLng).addTo(map);
              
              this.markers[person.id] = L.marker([person.latitude, person.longitude], {
                  icon: new L.DivIcon({
                      className: 'my-div-icon',
                      html: '<img class="my-div-image" width="auto" height="35px" src="http://maps.google.com/mapfiles/ms/micons/blue-pushpin.png"/>'+
                            '<div class="my-div-span" style="width:100px;text-align:left;">'+ person.name +'</div>'
                  })
              }).addTo(map);
            }
          })
          .catch(error => {
            console.log(error)
            this.errored = true
          })
          .finally(() => this.loading = false)
*/

          
      },
      initSocket(){
        this.socket = io();
        var _that = this; 

        this.socket.on('locationUpdate', function(data) {
          console.log("locationUpdate@maps "); 
            //var message = JSON.parse(data); 
            _that.moveMarker( data ); 
        });
        this.socket.on('time', function(data) {
            this.addMessage(data.time);
        });
        this.socket.on('error', console.error.bind(console));
        this.socket.on('message', console.log.bind(console));
      },
      setAuthStatus(val) {
        console.log("Setting authstatus through event to: ", val);
        this.authstatus = val;
        console.log("New value: ", app.authstatus);
      },
      moveMarker(message){

            //var marker = markers.2342fc7f; // or markers['2342fc7']
            /*
            var id  = parseInt(message.User.id) ?? 0; 
            var status  = parseInt(message.User.status) ?? 1; 
            var name = message.User.name ?? ""; 
            var lat = message.Coordinate.Latitude ?? 0.0; 
            var lng = message.Coordinate.Longitude ?? 0.0; 
            */
            var id  = parseInt(message.id) ?? 0; 
            //var status  = parseInt(message.status) ?? 1; 
            var status  = 1; 
            var name = message.username ?? ""; 
            var lat = message.latitude ?? 0.0; 
            var lng = message.longitude ?? 0.0; 
            var orderCount = message.order_count ?? 0; 
            var markerIcon ;  

            var marker = this.markers[ id ]; 
debugger; 
            var biker = this.bikers[id] ?? { id: id, name : "_", latitude: lat, longitude : lng }; 
            biker.id = id;
            biker.name = "_";
            biker.latitude = lat; 
            biker.longitude = lng;


            objIndex = this.bikers.findIndex((obj => obj.id == id));
            if(objIndex == -1) {
              this.bikers.push(biker); 
            }else{
              this.bikers[objIndex].latitude = lat; 
              this.bikers[objIndex].longitude = lng; 
              this.bikers[objIndex].name = name; 
              this.bikers[objIndex].order_count = orderCount; 
              
            }
            this.bikers.sort(function(a, b) {
                return parseFloat(a.order_count) - parseFloat(b.order_count);
            });


            if(marker){
              var newLatLng = new L.LatLng(lat, lng);
              marker.setLatLng(newLatLng); 


              if(orderCount > 0 )
                markerIcon  =  "http://maps.google.com/mapfiles/ms/micons/red-dot.png"; 
              else 
                markerIcon  =  "http://maps.google.com/mapfiles/ms/micons/green-dot.png"; 


/*
              var smallIcon = L.icon({
                iconUrl: 'http://maps.google.com/mapfiles/ms/micons/red-dot.png',
                iconSize: [50, 40],
                iconAnchor: [15,15]
              });
              */
              var smallIcon = new L.DivIcon({
                    className: 'rider-icon',
                    html: '<img class="my-div-image" width="auto" height="35px" src="'+ markerIcon +'"/>'+
                          '<div class="my-div-span" style="text-align:left;">'+ name +'</div>'
                })

              marker.smallIcon = smallIcon;
              marker.setIcon(marker.smallIcon);



            }else{
              console.log('todo ws');
              if(orderCount > 0 )
                //markerIcon  =  "http://maps.google.com/mapfiles/ms/micons/blue-pushpin.png"; 
                markerIcon  =  "http://maps.google.com/mapfiles/ms/micons/red-dot.png"; 
              else if(status == 2 )
                markerIcon  =  "http://maps.google.com/mapfiles/ms/micons/green-dot.png"; 

              this.markers[id] = null; 
              this.markers[id] = L.marker([ lat, lng ], {
                  icon: new L.DivIcon({
                      className: 'my-div-icon',
                      html: '<img class="my-div-image" width="auto" height="35px" src="'+ markerIcon +'"/>'+
                            '<div class="my-div-span" style="width:100px;text-align:left;">'+ name +'</div>'
                  })
              }).addTo(map);
              
            }

        },
        addMessage(message) {
            console.log( message ); 
            var text = document.createTextNode(message),
                el = document.createElement('li'),
                messages = document.getElementById('messages');

            el.appendChild(text);
            messages.appendChild(el);
        }, 
        getIconColor(item){
          return item.order_count > 0 ? "red" : "green"; 
        }

    },
  });
</script>

</body>
</html>
