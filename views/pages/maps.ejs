<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Live Tracking</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />


    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <link  rel="stylesheet"   href="http://cdn.leafletjs.com/leaflet-0.7/leaflet.css"/>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.4/socket.io.js"></script>
    <script src="http://cdn.leafletjs.com/leaflet-0.7/leaflet.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.0"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>


    <style>
      .rider-icon{
        text-align: center;
      }
    </style>





    <%- include('../partials/head'); %>
  </head>
  <body onload="" style="margin:0;">
    <header>
      <%- include('../partials/header'); %>
    </header>

    <main id="app">
      <div id="map" style="width: 100vw; height: calc(100vh - 120px) ;"></div>
    </main>

    <footer>
      <%- include('../partials/footer'); %>
    </footer>
  
    <script src='/socket.io/socket.io.js'></script>
    
<script>
  var app = new Vue({
    el: "#app",
    data() {
      return {
        authstatus: false,
        socket : null, 
        map : null, 
        markers : [], 
        users : []
      };
    },
    mounted() {
      this.initMaps(); 
      this.initSocket(); 
    },
    methods: {
      initMaps(){

        map = L.map('map').setView([16.8387371,96.1781961], 14);
        mapLink = 
              '<a href="http://openstreetmap.org">OpenStreetMap</a>';
        L.tileLayer(
            'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; ' + mapLink + ' Contributors',
            maxZoom: 20,
        }).addTo(map);


        axios
          .get('./attendance/active')
          .then(response => {
            debugger; 
            this.users = response.data.data; 

            for (var i = 0; i < this.users.length; i++) {
              var person = this.users[i];
              // Create and save a reference to each marker
              // markers[person.id] = L.marker(person.latLng).addTo(map);
              
              this.markers[person.id] = L.marker(person.latLng, {
                  icon: new L.DivIcon({
                      className: 'my-div-icon',
                      html: '<img class="my-div-image" width="auto" height="35px" src="http://maps.google.com/mapfiles/ms/micons/blue-pushpin.png"/>'+
                            '<div class="my-div-span" style="width:100px;text-align:left;">'+ person.name +'</div>'
                  })
              }).addTo(map);
            }
          })
          .catch(error => {
            console.log(error)
            this.errored = true
          })
          .finally(() => this.loading = false)


          /*
          // Loop through the data
          for (var i = 0; i < data.length; i++) {
            var person = data[i];
            // Create and save a reference to each marker
            // markers[person.id] = L.marker(person.latLng).addTo(map);
            
            markers[person.id] = L.marker(person.latLng, {
                icon: new L.DivIcon({
                    className: 'my-div-icon',
                    html: '<img class="my-div-image" width="auto" height="35px" src="http://maps.google.com/mapfiles/ms/micons/blue-pushpin.png"/>'+
                          '<div class="my-div-span" style="width:100px;text-align:left;">'+ person.name +'</div>'
                })
            }).addTo(map);

          }
          */


      },
      initSocket(){
        debugger; 
        this.socket = io();
        var _that = this; 

        this.socket.on('locationUpdate', function(data) {
          console.log("locationUpdate@maps "); 
          debugger ; 
            //var message = JSON.parse(data); 
            _that.moveMarker( data ); 
        });
        this.socket.on('time', function(data) {
            this.addMessage(data.time);
        });
        this.socket.on('error', console.error.bind(console));
        this.socket.on('message', console.log.bind(console));
      },
      setAuthStatus(val) {
        console.log("Setting authstatus through event to: ", val);
        this.authstatus = val;
        console.log("New value: ", app.authstatus);
      },
      moveMarker(message){
          debugger; 
            //var marker = markers.2342fc7f; // or markers['2342fc7']
            /*
            var id  = parseInt(message.User.id) ?? 0; 
            var status  = parseInt(message.User.status) ?? 1; 
            var name = message.User.name ?? ""; 
            var lat = message.Coordinate.Latitude ?? 0.0; 
            var lng = message.Coordinate.Longitude ?? 0.0; 
            */
            var id  = parseInt(message.id) ?? 0; 
            //var status  = parseInt(message.status) ?? 1; 
            var status  = 1; 
            var name = message.username ?? ""; 
            var lat = message.latitude ?? 0.0; 
            var lng = message.longitude ?? 0.0; 
            var orderCount = message.order_count ?? 0; 
            var markerIcon ;  

            var marker = this.markers[ id ]; 



            if(marker){
              var newLatLng = new L.LatLng(lat, lng);
              marker.setLatLng(newLatLng); 


              if(orderCount > 0 )
                markerIcon  =  "http://maps.google.com/mapfiles/ms/micons/red-dot.png"; 
              else 
                markerIcon  =  "http://maps.google.com/mapfiles/ms/micons/green-dot.png"; 


/*
              var smallIcon = L.icon({
                iconUrl: 'http://maps.google.com/mapfiles/ms/micons/red-dot.png',
                iconSize: [50, 40],
                iconAnchor: [15,15]
              });
              */
              var smallIcon = new L.DivIcon({
                    className: 'rider-icon',
                    html: '<div class="my-div-span" style="width:100px;text-align:left;">'+ orderCount +'</div>'+ 
                          '<img class="my-div-image" width="auto" height="35px" src="'+ markerIcon +'"/>'+
                          '<div class="my-div-span" style="width:100px;text-align:left;">'+ name +'</div>'
                })

              marker.smallIcon = smallIcon;
              marker.setIcon(marker.smallIcon);



            }else{
              console.log('todo ws');
              if(orderCount > 0 )
                //markerIcon  =  "http://maps.google.com/mapfiles/ms/micons/blue-pushpin.png"; 
                markerIcon  =  "http://maps.google.com/mapfiles/ms/micons/red-dot.png"; 
              else if(status == 2 )
                markerIcon  =  "http://maps.google.com/mapfiles/ms/micons/green-dot.png"; 

              this.markers[id] = null; 
              this.markers[id] = L.marker([ lat, lng ], {
                  icon: new L.DivIcon({
                      className: 'my-div-icon',
                      html: '<img class="my-div-image" width="auto" height="35px" src="'+ markerIcon +'"/>'+
                            '<div class="my-div-span" style="width:100px;text-align:left;">'+ name +'</div>'
                  })
              }).addTo(map);
              
            }

        },
        addMessage(message) {
            console.log( message ); 
            var text = document.createTextNode(message),
                el = document.createElement('li'),
                messages = document.getElementById('messages');

            el.appendChild(text);
            messages.appendChild(el);
        }

    },
  });
</script>


  </body>
</html>